import java.util.ArrayList;
import java.io.Serializable;

public class Usuario implements Serializable {
    private static final int LIMITE_EMPRESTIMOS = 3;
    private static final String ERRO_LIMITE_EMPRESTIMOS = "‚ùå O usu√°rio j√° atingiu o limite de empr√©stimos (%d livros).";
    private static final String ERRO_LIVRO_NAO_ENCONTRADO = "‚ùå O livro \"%s\" n√£o est√° na lista de empr√©stimos.";
    private String nome;
    private int id;
    private ArrayList<Livro> livrosEmprestados;

    public Usuario(String nome, int id) {
        if (nome == null || nome.trim().isEmpty()) {
            throw new IllegalArgumentException("‚ùå O nome do usu√°rio n√£o pode ser nulo ou vazio.");
        }
        if (id <= 0) {
            throw new IllegalArgumentException("‚ùå O ID do usu√°rio deve ser um n√∫mero positivo.");
        }
        this.nome = nome;
        this.id = id;
        this.livrosEmprestados = new ArrayList<>();
    }

    public void exibirDetalhes() {
        System.out.println("üë§ Detalhes do Usu√°rio:");
        System.out.println("   üÜî ID: " + id);
        System.out.println("   üìõ Nome: " + nome);
        if (livrosEmprestados.isEmpty()) {
            System.out.println("   ‚ö†Ô∏è N√£o possui livros emprestados.");
        } else {
            System.out.println("   üìö Livros emprestados:");
            for (Livro livro : livrosEmprestados) {
                System.out.println("      üìñ - " + livro.getTitulo());
            }
        }
    }

    public void adicionarLivro(Livro livro) {
        if (livro == null) {
            throw new IllegalArgumentException("‚ùå O livro n√£o pode ser nulo.");
        }
        if (livrosEmprestados.size() < LIMITE_EMPRESTIMOS) {
            livrosEmprestados.add(livro);
            System.out.println("‚úÖ Livro \"" + livro.getTitulo() + "\" adicionado √† lista de empr√©stimos.");
        } else {
            System.out.printf((ERRO_LIMITE_EMPRESTIMOS) + "%n", LIMITE_EMPRESTIMOS);
        }
    }

    public void removerLivro(Livro livro) {
        if (livro == null) {
            throw new IllegalArgumentException("‚ùå O livro n√£o pode ser nulo.");
        }
        if (livrosEmprestados.remove(livro)) {
            System.out.println("‚úÖ Livro \"" + livro.getTitulo() + "\" removido da lista de empr√©stimos.");
        } else {
            System.out.printf((ERRO_LIVRO_NAO_ENCONTRADO) + "%n", livro.getTitulo());
        }
    }

    public int getId() {
        return id;
    }

    public ArrayList<Livro> getLivrosEmprestados() {
        return new ArrayList<>(livrosEmprestados); // Retorna uma c√≥pia para evitar modifica√ß√µes externas
    }

    public boolean podeEmprestar() {
        return livrosEmprestados.size() < LIMITE_EMPRESTIMOS;
    }

    public String getNome() {
        return nome;
    }
}
